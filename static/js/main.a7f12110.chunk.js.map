{"version":3,"sources":["img/logo-digital-generation.png","components/componentVisualMap.js","apiKeyGoogle.js","components/componentVisualButton.js","components/componentVisualSideBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ComponentVisualMap","require","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onGoogleApiLoad","bind","assertThisInitialized","window","google","maps","Map","document","getElementById","center","lat","lng","zoom","_this2","scriptApi","createElement","type","src","concat","positionScript","getElementsByTagName","parentNode","insertBefore","addEventListener","script","react_default","a","style","width","height","id","Component","ComponentVisualButton","handleClick","buttonOnClick","className","onClick","name","ComponentVisualSideBar","openNav","closeNav","state","sidebarWidth","navMargin","setState","Fragment","href","marginLeft","logo","alt","componentVisualButton","App","components_componentVisualSideBar","componentVisualMap","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7f12110.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-digital-generation.8e0c234a.png\";","/* eslint-disable no-tabs */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable react/sort-comp */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { Component } from 'react';\r\nimport apiKeyGoogle from '../apiKeyGoogle';\r\n\r\nconst storeDirectory = require('../store_directory.json');\r\n\r\nclass ComponentVisualMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onGoogleApiLoad = this.onGoogleApiLoad.bind(this);\r\n  }\r\n\r\n  onGoogleApiLoad() {\r\n    const map = new window.google.maps.Map(\r\n      document.getElementById('map'),\r\n      {\r\n        center: { lat: 19.30518, lng: -99.0615 },\r\n        zoom: 14,\r\n      },\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.google) {\r\n      const scriptApi = document.createElement('script');\r\n      scriptApi.type = 'text/javascript';\r\n      scriptApi.src = `https://maps.google.com/maps/api/js?key=${apiKeyGoogle}`;\r\n      const positionScript = document.getElementsByTagName('script')[0];\r\n      if (positionScript) {\r\n        positionScript.parentNode.insertBefore(scriptApi, positionScript);\r\n      }\r\n      // google.maps no se puede usar hasta que termine de ser cargado\r\n      scriptApi.addEventListener('load', (script) => {\r\n        this.onGoogleApiLoad();\r\n      });\r\n    } else {\r\n      this.onGoogleApiLoad();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section style={{ width: '100%', height: '90vh' }} id=\"map\" />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentVisualMap;\r\n","const apiKeyGoogle = 'AIzaSyDe1SI1uxaNHiq2idOcYWKCIL2lFwuNLi0';\r\n\r\nexport default apiKeyGoogle;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/prop-types */\r\nimport React, { Component } from 'react';\r\n\r\nclass ComponentVisualButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.buttonOnClick();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button type=\"button\" className={this.props.className} onClick={this.handleClick}>{this.props.name}</button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentVisualButton;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable no-script-url */\r\n/* eslint-disable class-methods-use-this */\r\nimport React, { Component } from 'react';\r\nimport ComponentVisualButton from './componentVisualButton';\r\nimport './css/componentVisualSideBar.css';\r\nimport logo from '../img/logo-digital-generation.png';\r\n\r\nclass ComponentVisualSideBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.openNav = this.openNav.bind(this);\r\n    this.closeNav = this.closeNav.bind(this);\r\n    // Inicializar para cuando sidebar est치 cerrado\r\n    this.state = {\r\n      sidebarWidth: '0',\r\n      navMargin: '0',\r\n    };\r\n  }\r\n\r\n  /* Se fija el ancho del panel lateral a 300px y el margen del contenido de la p치gina a 300px */\r\n  openNav() {\r\n    this.setState({\r\n      sidebarWidth: '300px',\r\n      navMargin: '300px',\r\n    });\r\n  }\r\n\r\n  /* Se fija el ancho del panel lateral a 0 y el margen del contenido de la p치gina a 0 */\r\n  closeNav() {\r\n    this.setState({\r\n      sidebarWidth: '0px',\r\n      navMargin: '0px',\r\n    });\r\n  }\r\n\r\n  // Se debe conectar los estilos al estado, para poder ser cambiados por una acci칩n de react\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <section id=\"mySidebar\" className=\"sidebar\" style={{ width: this.state.sidebarWidth }}>\r\n          <a href=\"javascript:void(0)\" className=\"closebtn\" onClick={this.closeNav}>&times;</a>\r\n          <h5>FAVORITOS</h5>\r\n        </section>\r\n        <nav id=\"nav\" style={{ marginLeft: this.state.navMargin }}>\r\n          <img src={logo} alt=\"Logo\" />\r\n          <ComponentVisualButton className=\"openbtn\" buttonOnClick={this.openNav} name=\"FAVORITOS\" />\r\n        </nav>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentVisualSideBar;\r\n","import React, { Component } from 'react';\r\nimport ComponentVisualMap from './components/componentVisualMap';\r\nimport ComponentVisualSideBar from './components/componentVisualSideBar';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <header>\r\n          <ComponentVisualSideBar />\r\n        </header>\r\n        <section>\r\n          <ComponentVisualMap />\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}