{"version":3,"sources":["img/logo-digital-generation.png","components/componentVisualInfoWindow.js","components/componentVisualMap.js","apiKeyGoogle.js","components/componentVisualButton.js","components/componentVisualSideBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ComponentVisualInfoWindow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getMarkerData","bind","assertThisInitialized","marker","storeDirectory","filter","store","Math","round","Coordinates","lat","latLng","lng","markerData","react_default","a","createElement","id","Name","Address","Component","require","ComponentVisualMap","infoWindow","onGoogleApiLoad","_this2","window","google","maps","InfoWindow","content","map","Map","document","getElementById","center","zoom","Marker","position","name","title","addListener","clickedMarker","createInfoWindow","setPosition","evt","render","components_componentVisualInfoWindow","open","_this3","scriptApi","type","src","concat","positionScript","getElementsByTagName","parentNode","insertBefore","addEventListener","script","style","width","height","ComponentVisualButton","handleClick","buttonOnClick","className","onClick","ComponentVisualSideBar","openNav","closeNav","state","sidebarWidth","navMargin","setState","Fragment","href","marginLeft","logo","alt","componentVisualButton","App","components_componentVisualSideBar","componentVisualMap","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5d43f7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-digital-generation.8e0c234a.png\";","/* eslint-disable max-len */\r\n/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/prop-types */\r\nimport React, { Component } from 'react';\r\nimport './css/componentVisualInfoWindow.css';\r\n\r\nclass ComponentVisualInfoWindow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getMarkerData = this.getMarkerData.bind(this);\r\n  }\r\n\r\n  getMarkerData(marker) {\r\n    return this.props.storeDirectory.filter(store =>\r\n      Math.round(store.Coordinates.lat * 10000000) === Math.round(marker.latLng.lat() * 10000000)\r\n      && Math.round(store.Coordinates.lng * 10000000) === Math.round(marker.latLng.lng() * 10000000))[0];\r\n  }\r\n\r\n  render() {\r\n    const markerData = this.getMarkerData(this.props.marker);\r\n    return (\r\n      <div id=\"insideinfowindow\">\r\n        <h4>INFORMACIÓN TIENDA</h4>\r\n        <h5>\r\n          <strong>Nombre:</strong>\r\n          {' '}\r\n          {markerData.Name}\r\n        </h5>\r\n        <h5>\r\n          <strong>Dirección:</strong>\r\n          {' '}\r\n          {markerData.Address}\r\n        </h5>\r\n        <h5>\r\n          <strong>Coordenadas:</strong>\r\n          {' '}\r\n          {markerData.Coordinates.lat}\r\n          ,\r\n          {' '}\r\n          {markerData.Coordinates.lng}\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentVisualInfoWindow;\r\n","/* eslint-disable react/sort-comp */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport apiKeyGoogle from '../apiKeyGoogle';\r\nimport ComponentVisualInfoWindow from './componentVisualInfoWindow';\r\n\r\nconst storeDirectory = require('../store_directory.json');\r\n\r\nclass ComponentVisualMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.infoWindow = {};\r\n    this.onGoogleApiLoad = this.onGoogleApiLoad.bind(this);\r\n  }\r\n\r\n  onGoogleApiLoad() {\r\n    this.infoWindow = new window.google.maps.InfoWindow({ content: '<div id=\"infowindow\" />' });\r\n    const map = new window.google.maps.Map(\r\n      document.getElementById('map'),\r\n      {\r\n        center: { lat: 19.30518, lng: -99.0615 },\r\n        zoom: 14,\r\n      },\r\n    );\r\n    storeDirectory.map((store) => {\r\n      const marker = new window.google.maps.Marker({\r\n        position: { lat: store.Coordinates.lat, lng: store.Coordinates.lng },\r\n        name: store.Name,\r\n        title: store.Address,\r\n        map,\r\n      });\r\n\r\n      marker.addListener('click', (clickedMarker) => {\r\n        this.createInfoWindow(clickedMarker, map);\r\n      });\r\n    });\r\n  }\r\n\r\n  createInfoWindow(marker, map) {\r\n    this.infoWindow.setPosition({ lat: marker.latLng.lat(), lng: marker.latLng.lng() });\r\n    this.infoWindow.addListener('domready', (evt) => {\r\n      render(<ComponentVisualInfoWindow marker={marker} storeDirectory={storeDirectory} />, document.getElementById('infowindow'));\r\n    });\r\n    this.infoWindow.open(map);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.google) {\r\n      const scriptApi = document.createElement('script');\r\n      scriptApi.type = 'text/javascript';\r\n      scriptApi.src = `https://maps.google.com/maps/api/js?key=${apiKeyGoogle}`;\r\n      const positionScript = document.getElementsByTagName('script')[0];\r\n      if (positionScript) {\r\n        positionScript.parentNode.insertBefore(scriptApi, positionScript);\r\n      }\r\n      // google.maps no se puede usar hasta que termine de ser cargado\r\n      scriptApi.addEventListener('load', (script) => {\r\n        this.onGoogleApiLoad();\r\n      });\r\n    } else {\r\n      this.onGoogleApiLoad();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section style={{ width: '100%', height: '90vh' }} id=\"map\" />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentVisualMap;\r\n","const apiKeyGoogle = 'AIzaSyDe1SI1uxaNHiq2idOcYWKCIL2lFwuNLi0';\r\n\r\nexport default apiKeyGoogle;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/prop-types */\r\nimport React, { Component } from 'react';\r\n\r\nclass ComponentVisualButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.buttonOnClick();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button type=\"button\" className={this.props.className} onClick={this.handleClick}>{this.props.name}</button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentVisualButton;\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable no-script-url */\r\n/* eslint-disable class-methods-use-this */\r\nimport React, { Component } from 'react';\r\nimport ComponentVisualButton from './componentVisualButton';\r\nimport './css/componentVisualSideBar.css';\r\nimport logo from '../img/logo-digital-generation.png';\r\n\r\nclass ComponentVisualSideBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.openNav = this.openNav.bind(this);\r\n    this.closeNav = this.closeNav.bind(this);\r\n    // Inicializar para cuando sidebar está cerrado\r\n    this.state = {\r\n      sidebarWidth: '0',\r\n      navMargin: '0',\r\n    };\r\n  }\r\n\r\n  /* Se fija el ancho del panel lateral a 300px y el margen del contenido de la página a 300px */\r\n  openNav() {\r\n    this.setState({\r\n      sidebarWidth: '300px',\r\n      navMargin: '300px',\r\n    });\r\n  }\r\n\r\n  /* Se fija el ancho del panel lateral a 0 y el margen del contenido de la página a 0 */\r\n  closeNav() {\r\n    this.setState({\r\n      sidebarWidth: '0px',\r\n      navMargin: '0px',\r\n    });\r\n  }\r\n\r\n  // Se debe conectar los estilos al estado, para poder ser cambiados por una acción de react\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <section id=\"mySidebar\" className=\"sidebar\" style={{ width: this.state.sidebarWidth }}>\r\n          <a href=\"javascript:void(0)\" className=\"closebtn\" onClick={this.closeNav}>&times;</a>\r\n          <h5>FAVORITOS</h5>\r\n        </section>\r\n        <nav id=\"nav\" style={{ marginLeft: this.state.navMargin }}>\r\n          <img src={logo} alt=\"Logo\" />\r\n          <ComponentVisualButton className=\"openbtn\" buttonOnClick={this.openNav} name=\"FAVORITOS\" />\r\n        </nav>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentVisualSideBar;\r\n","import React, { Component } from 'react';\r\nimport ComponentVisualMap from './components/componentVisualMap';\r\nimport ComponentVisualSideBar from './components/componentVisualSideBar';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <header>\r\n          <ComponentVisualSideBar />\r\n        </header>\r\n        <section>\r\n          <ComponentVisualMap />\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}